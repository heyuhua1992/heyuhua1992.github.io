<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[.sh 执行多命令]]></title>
    <url>%2F2018%2F09%2F11%2Fsh-%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[使用.sh脚本文件执行多条命令在使用 Hexo 的时候，每次提交到服务器都需要运行： hexo clean hexo g gulp (如果没有使用gulp进行压缩，这一步不需要) hexo d 感觉很麻烦，并且每一步还要等它完成后在输入下一条指令.sh 脚本文件可以很好的解决这个问题而且无需安装直接使用新建一个push.sh 文件把以下代码拷贝进去 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950echo '准备推送到github'if [ -d "public" ]; then echo 'public 文件存在,执行hexo clean' hexo cleanelse echo 'public 文件不存在'fiecho '正在执行hexo g'hexo gif [ -s "gulpfile.js" ]; then echo 'gulpfile.js 文件存在, 执行gulp' echo '正在压缩代码' gulpelse echo 'gulpfile.js 文件不存在'fiecho '提交到服务器'hexo dread -s -p "已完成，请按任意键退出" pass``` 然后双击 .sh 文件即可运行，也可以在shell终端中进入 .sh 文件所在目录，运行 ./push.sh ,然后tab一下，按enter键运行### 分析下上面的代码echo '提示信息' ，用于在终端上输出提示信息，有没有不影响程序的运行，只为了提示用户现在执行到了哪一步或者接下来要输入的信息的格式。 ```sh# 下面的 if是判断语句入口，[] 内是判断的条件 # -d 是文件比较符的一种，用于判断对象是否存在，并且为目录# "public" 是文件或者目录的路径，默认为当前.sh文件所在目录。要注意判断文件的时候要加上后缀# 满足条件的时候执行then之后，else之前的命令# 要注意空格，格式要求按照示例代码，否则可能出错if [ -d "public" ]; then echo 'public 文件存在,执行hexo clean' # 这里的hexo clean 相当于在shell终端上，进入到当前.sh文件中执行hexo clean hexo cleanelse echo 'public 文件不存在'fi``` 命令运行完之后不关闭shell终端，用户输入后再推出```sh# 等待用户输入密码read -s -p "已完成，请按任意键退出" pass 文件比较符12345678910111213-e 判断对象是否存在-d 判断对象是否存在，并且为目录-f 判断对象是否存在，并且为常规文件-L 判断对象是否存在，并且为符号链接-h 判断对象是否存在，并且为软链接-s 判断对象是否存在，并且长度不为0-r 判断对象是否存在，并且可读-w 判断对象是否存在，并且可写-x 判断对象是否存在，并且可执行-O 判断对象是否存在，并且属于当前用户-G 判断对象是否存在，并且属于当前用户组-nt 判断file1是否比file2新 [ &quot;/data/file1&quot; -nt &quot;/data/file2&quot; ]-ot 判断file1是否比file2旧 [ &quot;/data/file1&quot; -ot &quot;/data/file2&quot; ]]]></content>
      <categories>
        <category>.sh</category>
      </categories>
      <tags>
        <tag>GulpJs</tag>
        <tag>.sh</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GulpJs 使用]]></title>
    <url>%2F2018%2F09%2F10%2FGulp-%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[根据这个教程学习的前端构建工具gulpjs的使用介绍及技巧-无双 在博客中使用 (来源于网络) 运行 npm install gulp -g 在Blog目录下 运行 npm i -S gulp 在Blog目录下 运行 以下命令1npm i -S gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin 在Blog目录下 添加gulpfile.js文件， 复制以下代码粘贴进去12345678910111213141516171819202122232425262728293031323334var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']);// 压缩生成的博文是先执行 hexo g (生成博文) 然后执行 gulp (压缩) 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 过段时间或许会加入图片压缩]]></content>
      <categories>
        <category>GulpJs</category>
      </categories>
      <tags>
        <tag>GulpJs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用gitment遇到的问题与解决办法]]></title>
    <url>%2F2018%2F09%2F10%2F%E4%BD%BF%E7%94%A8gitment%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[#终于可以用了 hexo version1234567891011121314151617hexo: 3.7.1hexo-cli: 1.1.0os: Windows_NT 10.0.16299 win32 x64http_parser: 2.8.0node: 8.11.3v8: 6.2.414.54uv: 1.19.1zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.32.0napi: 3openssl: 1.0.2oicu: 60.1unicode: 10.0cldr: 32.0tz: 2017c hexo-theme-next version “6.4.1” 使用CNAME 后点击登陆 循环跳回首页 CNAME中的内容与github上的OAuth Apps中的Homepage URL、Authorization callback URL内容一致，可以正常登陆 有时候以为链接后面带的#more是失败的原因 去掉#more 在主题配置中，设置scroll_to_more: false 登陆成功后无法初始化评论 blog/themes/next/layout/_third-party/comments找到文件gitment.swig 把 id: window.location.pathname,改为 id: &#123;&#123;page.date&#125;&#125; + “”, 没有后面的 + “” ,会提示不是字符串也不是对象]]></content>
      <categories>
        <category>Gitment</category>
      </categories>
      <tags>
        <tag>Gitment</tag>
        <tag>Hexo-theme-next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 常用指令]]></title>
    <url>%2F2018%2F09%2F09%2FHexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[指令 新建文章 指令：hexo new “文章的标题（可以带空格）” 简写：hexo n 生成静态文件 指令：hexo generate 简写：hexo g 部署网站 （部署之前先生成静态文件） 指令：hexo deploy 简写：hexo d 启动服务器预览 指令：hexo server 简写：hexo s 清除缓存 指令：hexo clean 完成后部署（两条效果一样） 指令：hexo d -g 指令：hexo g -d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+next设置相关]]></title>
    <url>%2F2018%2F09%2F08%2Fhexo%2Bnext%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[学习如何使用 构建自己的博客hexo-如何生成一篇新的post个性化配置主题优化 配置更改标签页，标签配色 进入Blog\themes\next\layout\page.swig，搜索tag-cloud-tags 标签中内容为： &#123;&#123; tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: ‘#ccc’, end_color: ‘#111’}) &#125;&#125; 更改start_color,end_color 写文章 hexo支持用markdown写作，在目录blog/source/_posts新建markdown文件，或者使用命令hexo new posts “你的文章标题”(有空格时必须加引号) 默认配置文件中设置的default_layout: post，所以也可以用 hexo new “你的文章标题”(有空格时必须加引号) 小坑：&#123;&#123;&#125;&#125;符号编译出错 markdown生成静态页面，&#123;&#123;&#125;&#125;是swig模板符号，属于特殊字符，在编译时解析不了双大括号中间字符串就会报错 解决方案：用转义字符代替12&#123; -&gt; &amp;#123; — 大括号左边部分Left curly brace&#125; -&gt; &amp;#125; — 大括号右边部分Right curly brace 添加文章分类页 cd blog hexo new page categories 修改blog/source/categories/index.md 文件 1234title: 分类date: 2018-09-08 15:22:17type: categoriescomments: false #不开启评论功能 vi blog/themes/next/_config.yml 把 #categories: /categories/ || th 前面的#去掉 添加标签分类页 cd blog hexo new page tags 修改blog/source/tags/index.md 文件 1234title: 标签date: 2018-09-08 15:35:44type: tagscomments: false vi blog/themes/next/_config.yml 把 #tags: /tags/ || tags 前面的#去掉 添加404页面 把写好的404.html 页面放到 blog/themes/next/source 切换主题 vi blog/themes/next/_config.yml12345# Schemes #scheme: Muse #scheme: Mist scheme: Pisces #scheme: Gemini 百度统计 注册百度统计，管理 &gt; 网站列表 &gt; 新增网站完成后，代码管理 &gt; 代码获取，就能得到统计id 123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement("script"); hm.src = "https://hm.baidu.com/hm.js?4cb26b281687c7ae654b8b53e58b1bff"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; vi blog/themes/next/_config.yml 把 #baidu_analytics: 改为 baidu_analytics: 4cb26b281687c7ae654b8b53e58b1bff 不蒜子统计 不蒜子统计可以统计站点以及每个页面的PV、UV和站点总的访问数，以小眼睛的形式展现。 编辑主题配置文件中的busuanzi_count的配置项。当enable: true时，代表开启全局开关。若total_visitors、total_views、post_views的值均为false时，不蒜子仅作记录而不会在页面上显示。 在使用localhost:4000的时候会出现访问人数很多的情况，因为这个ip大家测试的时候在用 只有gemini、pisces主题才有这个功能（默认主题为muse） 评论功能 之 gitment配置 vi blog/themes/next/_config.yml 改之后 12345678910111213gitment: enable: true mint: true count: true lazy: false cleanly: false language: zh-CN github_user: heyuhua1992@163.com github_repo: heyuhua1992.github.io client_id: a27075a2e647766f5b61 client_secret: f2d60a60dce31a5de44588da0f3ef35669c0885b proxy_gateway: redirect_protocol: 开启enable为true就显示评论框了，不过要真正实现评论可用，需要 用自己的github账号注册一个应用许可证书，即OAuth application，注册成功就生成了client_id和client_secret。 步骤：你的github首页 &gt; settings &gt; Developer settings &gt; OAuth Apps &gt; New oAuth App。填写好相关信息，其中，Homepage URL和Authorization callback URL都写上你的github博客首页地址，比如https://xxx.github.io/，点击Register application即可完成注册，生成Client ID和Client Secret 底部建站时间和图标修改 改后12345678910icon: name: user color: "#23ade5"copyright:powered: enable: false version: falsetheme: enable: false version: false 侧边栏社交链接 vi blog/themes/next/_config.yml 改后12social: GitHub: https://github.com/heyuhua1992 || github 添加百度/谷歌/本地 自定义站点内容搜索 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true Hexo-admin Hexo-admin插件允许我们直接在本地页面上修改文章内容。 12下载 cd /blognpm i hexo-admin --save 登录 http://localhost:4000/admin 即可看到我们所有的文章内容，并且在可视化界面中操作文章内容 在网站首页只显示每篇文章的部分内容，不要全部内容都展示出来。 123auto_excerpt:enable: true # 显示阅读全文length: 150 要注意的问题有些文章评论初始化弹出validation failed错误 因为GitHub的每个issues有两个lables，一个是gitment，另一个是id，id取的是页面pathname，标签长度限定不超过50个字符，而像一般中文标题文章，转义后字符很容易超过50个字符 目录blog/themes/next/layout/_third-party/comments找到文件gitment.swig 把 id: window.location.pathname, 改为 id: &#123;&#123;page.date&#125;&#125; + “”, 在这里我用文章创建时间戳来当作id，这样长度就不会超过50个字符，成功解决！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
